# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, crop: str=None, similarity: float=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param id: The id of this Person.  # noqa: E501
        :type id: str
        :param crop: The crop of this Person.  # noqa: E501
        :type crop: str
        :param similarity: The similarity of this Person.  # noqa: E501
        :type similarity: float
        """
        self.swagger_types = {
            'id': str,
            'crop': str,
            'similarity': float
        }

        self.attribute_map = {
            'id': 'id',
            'crop': 'crop',
            'similarity': 'similarity'
        }
        self._id = id
        self._crop = crop
        self._similarity = similarity

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def crop(self) -> str:
        """Gets the crop of this Person.


        :return: The crop of this Person.
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop: str):
        """Sets the crop of this Person.


        :param crop: The crop of this Person.
        :type crop: str
        """

        self._crop = crop

    @property
    def similarity(self) -> float:
        """Gets the similarity of this Person.


        :return: The similarity of this Person.
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity: float):
        """Sets the similarity of this Person.


        :param similarity: The similarity of this Person.
        :type similarity: float
        """

        self._similarity = similarity
